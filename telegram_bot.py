import os
import logging
import asyncio
from dotenv import load_dotenv
from datetime import datetime, timedelta, date
import re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ dashboard_generator.py
from dashboard_generator import generate_dashboard_from_text

# –ò–º–ø–æ—Ä—Ç—ã aiogram
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.client.default import DefaultBotProperties

# --- –ö–û–ù–°–¢–ê–ù–¢–´ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø –°–¢–ê–†–´–• –§–ê–ô–õ–û–í ---

def cleanup_old_dashboards(days_to_keep: int = 1):
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –¥–∞—à–±–æ—Ä–¥–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã
    –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö N –¥–Ω–µ–π.
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: 'dashboard_data_X_NAME_YYYY-MM-DD.html'
    DASHBOARD_FILE_PATTERN = re.compile(r'dashboard_data_\d_[a-z]+_(\d{4}-\d{2}-\d{2})\.html$')

    # –î–∞—Ç–∞-–ø–æ—Ä–æ–≥, –≤—Å–µ, —á—Ç–æ —Å—Ç–∞—Ä—à–µ, –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
    cutoff_date = date.today() - timedelta(days=days_to_keep)

    deleted_count = 0

    logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞—à–±–æ—Ä–¥–æ–≤. –£–¥–∞–ª—è—é—Ç—Å—è —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ {days_to_keep} –¥–Ω–µ–π (–¥–æ {cutoff_date}).")

    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for filename in os.listdir('.'):
        match = DASHBOARD_FILE_PATTERN.match(filename)

        # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É
        if match:
            file_date_str = match.group(1)

            try:
                file_date = datetime.strptime(file_date_str, '%Y-%m-%d').date()

                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—É —Ñ–∞–π–ª–∞ —Å –ø–æ—Ä–æ–≥–æ–≤–æ–π –¥–∞—Ç–æ–π
                if file_date < cutoff_date:
                    os.remove(filename)
                    deleted_count += 1
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {filename}")

            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞: {filename}")
                continue

    logger.info(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤.")
    return deleted_count


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def command_start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –î—ç—à–±–æ—Ä–¥–æ–≤ –û–ö–ö.\n\n'
        '–ü—Ä–æ—Å—Ç–æ **–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞**, –∏ —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é '
        '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML-–¥–∞—à–±–æ—Ä–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –≤–∞–º.',
        parse_mode='Markdown'
    )


async def handle_report_text(message: Message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞).
    """
    report_text = message.text

    # 1. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.answer(
        'üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–∞—à–±–æ—Ä–¥–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.'
    )

    html_file_path = None
    try:
        # --- –®–ê–ì 1.5: –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–´–• –§–ê–ô–õ–û–í (–∑–∞–ø—É—Å–∫ –≤ –ø–æ—Ç–æ–∫–µ) ---
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        await asyncio.to_thread(cleanup_old_dashboards, days_to_keep=7)

        # 2. –í—ã–∑—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞
        html_file_path = await asyncio.to_thread(
            generate_dashboard_from_text,
            report_text
        )

        if html_file_path:
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π HTML-—Ñ–∞–π–ª
            file_to_send = FSInputFile(html_file_path, filename=os.path.basename(html_file_path))

            await message.answer_document(
                document=file_to_send,
                caption='‚úÖ –í–∞—à –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –≥–æ—Ç–æ–≤!'
            )
            logger.info(f"–î–∞—à–±–æ—Ä–¥ {html_file_path} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        else:
            await message.answer(
                '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞—à–±–æ—Ä–¥. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç—á–µ—Ç–µ.'
            )

    except ValueError as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞
        error_msg = str(e).replace("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç. –î–µ—Ç–∞–ª–∏: ",
                                   "‚ùå **–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞!**\n")
        await message.answer(f'{error_msg}', parse_mode='Markdown')
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        await message.answer(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—á–µ—Ç–∞. '
            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.'
        )
    finally:
        # 4. –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await processing_message.delete()
        if html_file_path and os.path.exists(html_file_path):
            os.remove(html_file_path)
            logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {html_file_path} —É–¥–∞–ª–µ–Ω.")


# --- MAIN –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ---

async def main() -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞."""

    if not BOT_TOKEN:
        logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ —Ñ–∞–π–ª–µ .env.")
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º DefaultBotProperties –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
    dp = Dispatcher()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.
    # –¢–∞–∫ –∫–∞–∫ command_start_handler –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ, —Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç.
    dp.message.register(command_start_handler, CommandStart())
    dp.message.register(handle_report_text, F.text)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç

    logger.info("–ë–æ—Ç aiogram –∑–∞–ø—É—â–µ–Ω.")
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot)


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main()
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
